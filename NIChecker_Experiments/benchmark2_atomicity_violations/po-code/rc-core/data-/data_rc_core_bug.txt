CBMC version 4.9 64-bit linux
Parsing rc_core_bug.c
<command-line>: warning: "__STDC_VERSION__" redefined
<built-in>: note: this is the location of the previous definition
Converting
Type-checking rc_core_bug
file rc_core_bug.c line 4395 function show_protocols: function `c::assert' is not declared
file rc_core_bug.c line 5059: function `c::nondet_chars' is not declared
file rc_core_bug.c line 5061: function `c::nondet_kobj_uevent_env' is not declared
file rc_core_bug.c line 5062: function `c::nondet_charptr' is not declared
file rc_core_bug.c line 5063: function `c::nondet_device' is not declared
file rc_core_bug.c line 5065: function `c::nondet_sizet' is not declared
file rc_core_bug.c line 5067: function `c::nondet_device_attribute' is not declared
file rc_core_bug.c line 5070: function `c::nondet_umode_t' is not declared
file rc_core_bug.c line 6271 function store_protocols_ldvwrapper: warning: conversion from `struct rc_dev *' to `struct device *': incompatible pointer types
file rc_core_bug.c line 6279 function show_protocols_ldvwrapper: warning: conversion from `struct rc_dev *' to `struct device *': incompatible pointer types
Generating GOTO Program
Adding CPROVER library
<command-line>: warning: "__STDC_VERSION__" redefined
<built-in>: note: this is the location of the previous definition
Function Pointer Removal
Partial Inlining
Generic Property Instrumentation
Starting Bounded Model Checking
Not unwinding loop c::ldv_error.0 iteration 1 (1 max) file rc_core_bug.c line 7453 function ldv_error thread 1
Not unwinding loop c::ldv_error.0 iteration 1 (1 max) file rc_core_bug.c line 7453 function ldv_error thread 1
Not unwinding loop c::show_protocols.0 iteration 1 (1 max) file rc_core_bug.c line 4438 function show_protocols thread 1
Not unwinding loop c::store_protocols.2 iteration 1 (1 max) file rc_core_bug.c line 4603 function store_protocols thread 3
Adding interrupt constraints
size of program expression: 1608 steps
no slicing due to threads
Generated 1 VCC(s), 1 remaining after simplification
Passing problem to propositional reduction
Running propositional reduction
Post-processing
Solving with MiniSAT 2.2.0 with simplifier
756119 variables, 2405559 clauses
SAT checker: negated claim is SATISFIABLE, i.e., does not hold
Runtime decision procedure: 46.728s
Building error trace

Counterexample:

State 1 file rc_core_bug.c line 3308 thread 0
----------------------------------------------------
  ldv_state_variable_3=0 (00000000000000000000000000000000)

State 2 file rc_core_bug.c line 3309 thread 0
----------------------------------------------------
  ldv_state_variable_1=0 (00000000000000000000000000000000)

State 3 file rc_core_bug.c line 3310 thread 0
----------------------------------------------------
  ldv_state_variable_2=0 (00000000000000000000000000000000)

State 4 file rc_core_bug.c line 3311 thread 0
----------------------------------------------------
  ref_cnt=0 (00000000000000000000000000000000)

State 5 file rc_core_bug.c line 3312 thread 0
----------------------------------------------------
  ldv_state_variable_0=0 (00000000000000000000000000000000)

State 6 file rc_core_bug.c line 3439 thread 0
----------------------------------------------------
  rc_core_debug=0 (00000000000000000000000000000000)

State 7 file rc_core_bug.c line 3478 thread 0
----------------------------------------------------
  rc_map_list={ .next=&rc_map_list.next, .prev=&rc_map_list.next } ({ 0000001000000000000000000000000000000000000000000000000000000000, 0000001000000000000000000000000000000000000000000000000000000000 })

State 8 file rc_core_bug.c line 3479 thread 0
----------------------------------------------------
  rc_map_lock={ .ldv_5961={ .rlock={ .raw_lock={ .ldv_2024={ .head_tail=0u } }, .magic=3735899821u,
    .owner_cpu=4294967295u, .$pad0=0,
    .owner=INVALID-255, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name="rc_map_lock",
    .cpu=0, .$pad0=0, .ip=0ul } } } } ({ { { 00000000000000000000000000000000 }, 11011110101011010100111010101101, 11111111111111111111111111111111, 00000000000000000000000000000000, 1111111111111111111111111111111111111111111111111111111111111111, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000001100000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } })

State 9 file rc_core_bug.c line 3568 thread 0
----------------------------------------------------
  empty={ { .scancode=42, .keycode=152 } } ({ { 00000000000000000000000000101010, 00000000000000000000000010011000 } })

State 10 file rc_core_bug.c line 3569 thread 0
----------------------------------------------------
  empty_map={ .list={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) }, .map={ .scan=&empty[0].scancode, .size=1u, .len=0u, .alloc=0u,
    .rc_type=/*enum*/RC_TYPE_UNKNOWN, .name="rc-empty",
    .lock={ .ldv_5961={ .rlock={ .raw_lock={ .ldv_2024={ .head_tail=0u } }, .magic=0u,
    .owner_cpu=0u, .$pad0=0, .owner=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } } } } } } ({ { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, { 0000010000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000001, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000010100000000000000000000000000000000000000000000000000000000, { { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } } } })

State 11 file rc_core_bug.c line 4334 thread 0
----------------------------------------------------
  ir_input_class={ .name="rc", .owner=((struct module *)NULL), .class_attrs=((struct class_attribute *)NULL),
    .dev_attrs=((struct device_attribute *)NULL),
    .dev_bin_attrs=((struct bin_attribute *)NULL),
    .dev_kobj=((struct kobject *)NULL),
    .dev_uevent=((int (*)(struct device *, struct kobj_uevent_env *))NULL), .devnode=ir_devnode,
    .class_release=((void (*)(struct class *))NULL), .dev_release=((void (*)(struct device *))NULL),
    .suspend=((int (*)(struct device *, struct pm_message))NULL),
    .resume=((int (*)(struct device *))NULL),
    .ns_type=((struct kobj_ns_type_operations *)NULL),
    .namespace=((void * (*)(struct device *))NULL),
    .pm=((struct dev_pm_ops *)NULL),
    .p=((struct subsys_private *)NULL) } ({})

State 12 file rc_core_bug.c line 4336 thread 0
----------------------------------------------------
  proto_names={ { .type=0, .name="none" }, { .type=2, .name="other" }, { .type=1, .name="unknown" }, { .type=24, .name="rc-5" }, { .type=1024, .name="nec" }, { .type=253952, .name="rc-6" }, { .type=64, .name="jvc" }, { .type=896, .name="sony" }, { .type=32, .name="rc-5-sz" }, { .type=2048, .name="sanyo" }, { .type=4096, .name="mce_kbd" }, { .type=4, .name="lirc" } } ({ { 0000000000000000000000000000000000000000000000000000000000000000, 0000100000000000000000000000000000000000000000000000000000000000 }, { 0000000000000000000000000000000000000000000000000000000000000010, 0000100100000000000000000000000000000000000000000000000000000000 }, { 0000000000000000000000000000000000000000000000000000000000000001, 0000101000000000000000000000000000000000000000000000000000000000 }, { 0000000000000000000000000000000000000000000000000000000000011000, 0000101100000000000000000000000000000000000000000000000000000000 }, { 0000000000000000000000000000000000000000000000000000010000000000, 0000110000000000000000000000000000000000000000000000000000000000 }, { 0000000000000000000000000000000000000000000000111110000000000000, 0000110100000000000000000000000000000000000000000000000000000000 }, { 0000000000000000000000000000000000000000000000000000000001000000, 0000111000000000000000000000000000000000000000000000000000000000 }, { 0000000000000000000000000000000000000000000000000000001110000000, 0000111100000000000000000000000000000000000000000000000000000000 }, { 0000000000000000000000000000000000000000000000000000000000100000, 0001000000000000000000000000000000000000000000000000000000000000 }, { 0000000000000000000000000000000000000000000000000000100000000000, 0001000100000000000000000000000000000000000000000000000000000000 }, { 0000000000000000000000000000000000000000000000000001000000000000, 0001001000000000000000000000000000000000000000000000000000000000 }, { 0000000000000000000000000000000000000000000000000000000000000100, 0001001100000000000000000000000000000000000000000000000000000000 } })

State 13 file <built-in-additions> line 21 thread 0
----------------------------------------------------
  __CPROVER_thread_id=0 (0000000000000000000000000000000000000000000000000000000000000000)

State 14 file <built-in-additions> line 22 thread 0
----------------------------------------------------
  __CPROVER_threads_exited=__CPROVER_threads_exited#1 (?)

State 15 file <built-in-additions> line 23 thread 0
----------------------------------------------------
  __CPROVER_next_thread_id=0 (0000000000000000000000000000000000000000000000000000000000000000)

State 16 file <built-in-additions> line 30 thread 0
----------------------------------------------------
  __CPROVER_deallocated=NULL (0000000000000000000000000000000000000000000000000000000000000000)

State 17 file <built-in-additions> line 31 thread 0
----------------------------------------------------
  __CPROVER_dead_object=NULL (0000000000000000000000000000000000000000000000000000000000000000)

State 18 file <built-in-additions> line 32 thread 0
----------------------------------------------------
  __CPROVER_malloc_object=NULL (0000000000000000000000000000000000000000000000000000000000000000)

State 19 file <built-in-additions> line 33 thread 0
----------------------------------------------------
  __CPROVER_malloc_size=0 (0000000000000000000000000000000000000000000000000000000000000000)

State 20 file <built-in-additions> line 34 thread 0
----------------------------------------------------
  __CPROVER_malloc_is_new_array=FALSE (0)

State 21 file <built-in-additions> line 35 thread 0
----------------------------------------------------
  __CPROVER_memory_leak=NULL (0000000000000000000000000000000000000000000000000000000000000000)

State 22 file <built-in-additions> line 57 thread 0
----------------------------------------------------
  __CPROVER_rounding_mode=0 (00000000000000000000000000000000)

State 23 file rc_core_bug.c line 4740 thread 0
----------------------------------------------------
  dev_attr_protocols={ .attr={ .name="protocols", .mode=420, .ignore_lockdep=FALSE, .$pad0=0,
    .key=((struct lock_class_key *)NULL), .skey={ .subkeys={ { .__one_byte=0 }, { .__one_byte=0 }, { .__one_byte=0 }, { .__one_byte=0 }, { .__one_byte=0 }, { .__one_byte=0 }, { .__one_byte=0 }, { .__one_byte=0 } } } }, .show=show_protocols,
    .store=store_protocols } ({ { 0001010000000000000000000000000000000000000000000000000000000000, 0000000110100100, 00000000, 0000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { { { 00000000 }, { 00000000 }, { 00000000 }, { 00000000 }, { 00000000 }, { 00000000 }, { 00000000 }, { 00000000 } } } }, 0001010100000000000000000000000000000000000000000000000000000000, 0001011000000000000000000000000000000000000000000000000000000000 })

State 24 file rc_core_bug.c line 4743 thread 0
----------------------------------------------------
  rc_dev_attrs={ &dev_attr_protocols.attr, ((struct attribute *)NULL) } ({ 0001011100000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 })

State 25 file rc_core_bug.c line 4744 thread 0
----------------------------------------------------
  rc_dev_attr_grp={ .name=((signed char *)NULL), .is_visible=((unsigned short int (*)(struct kobject *, struct attribute *, int))NULL), .attrs=rc_dev_attrs } ({ 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0001100000000000000000000000000000000000000000000000000000000000 })

State 26 file rc_core_bug.c line 4745 thread 0
----------------------------------------------------
  rc_dev_attr_groups={ &rc_dev_attr_grp.name, ((struct attribute_group *)NULL) } ({ 0001100100000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 })

State 27 file rc_core_bug.c line 4746 thread 0
----------------------------------------------------
  rc_dev_type={ .name=((signed char *)NULL), .groups=rc_dev_attr_groups, .uevent=rc_dev_uevent,
    .devnode=((signed char * (*)(struct device *, unsigned short int *))NULL), .release=rc_dev_release,
    .pm=((struct dev_pm_ops *)NULL) } ({ 0000000000000000000000000000000000000000000000000000000000000000, 0001101000000000000000000000000000000000000000000000000000000000, 0001101100000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0001110000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 })

State 28 file <built-in-additions> line 78 thread 0
----------------------------------------------------
  __CPROVER_pipe_count=0 (00000000000000000000000000000000)

State 29 file rc_core_bug.c line 5059 thread 0
----------------------------------------------------
  return_value_nondet_chars$1=0 (00000000000000000000000000000000)

State 30 file rc_core_bug.c line 5059 thread 0
----------------------------------------------------
  return_value_nondet_chars$1=0 (00000000000000000000000000000000)

State 31 file rc_core_bug.c line 5059 thread 0
----------------------------------------------------
  ldvarg3=((signed char *)NULL) (0000000000000000000000000000000000000000000000000000000000000000)

State 32 file rc_core_bug.c line 5060 thread 0
----------------------------------------------------
  dev_attr_protocols_group0={ .dev={ .parent=((struct device *)NULL), .p=((struct device_private *)NULL), .kobj={ .name=((const char *)NULL), .entry={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) }, .parent=((struct kobject *)NULL),
    .kset=((struct kset *)NULL), .ktype=((struct kobj_type *)NULL),
    .sd=((struct sysfs_dirent *)NULL), .kref={ .refcount={ .counter=0 } },
    .state_initialized=0, .state_in_sysfs=0,
    .state_add_uevent_sent=0, .state_remove_uevent_sent=0,
    .uevent_suppress=0, .$bit_field_pad0=0,
    .$pad0=0 },
    .init_name=((const char *)NULL),
    .type=((struct device_type *)NULL), .mutex={ .count={ .counter=0 }, .$pad0=0, .wait_lock={ .ldv_5961={ .rlock={ .raw_lock={ .ldv_2024={ .head_tail=0u } }, .magic=0u,
    .owner_cpu=0u, .$pad0=0, .owner=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } } } }, .wait_list={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) },
    .owner=((struct task_struct *)NULL),
    .name=((const char *)NULL),
    .magic=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } },
    .bus=((struct bus_type *)NULL),
    .driver=((struct device_driver *)NULL), .platform_data=NULL,
    .power={ .power_state={ .event=0 }, .can_wakeup=0, .async_suspend=0,
    .$bit_field_pad0=0, .is_prepared=FALSE,
    .is_suspended=FALSE, .ignore_children=FALSE,
    .early_init=FALSE, .$pad0=0,
    .lock={ .ldv_5961={ .rlock={ .raw_lock={ .ldv_2024={ .head_tail=0u } }, .magic=0u,
    .owner_cpu=0u, .$pad0=0, .owner=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } } } }, .entry={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) },
    .completion={ .done=0u, .$pad0=0, .wait={ .lock={ .ldv_5961={ .rlock={ .raw_lock={ .ldv_2024={ .head_tail=0u } }, .magic=0u,
    .owner_cpu=0u, .$pad0=0, .owner=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } } } }, .task_list={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) } } },
    .wakeup=((struct wakeup_source *)NULL),
    .wakeup_path=FALSE,
    .syscore=FALSE, .$pad1=0, .suspend_timer={ .entry={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) }, .expires=0ul,
    .base=((struct tvec_base *)NULL), .function=((void (*)(unsigned long int))NULL),
    .data=0ul,
    .slack=0, .start_pid=0, .start_site=NULL, .start_comm={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    .lockdep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } },
    .timer_expires=0ul,
    .work={ .data={ .counter=0l }, .entry={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) }, .func=((void (*)(struct work_struct *))NULL),
    .lockdep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } }, .wait_queue={ .lock={ .ldv_5961={ .rlock={ .raw_lock={ .ldv_2024={ .head_tail=0u } }, .magic=0u,
    .owner_cpu=0u, .$pad0=0, .owner=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } } } }, .task_list={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) } },
    .usage_count={ .counter=0 },
    .child_count={ .counter=0 }, .disable_depth=0,
    .idle_notification=0, .request_pending=0,
    .deferred_resume=0, .run_wake=0,
    .runtime_auto=0, .no_callbacks=0, .irq_safe=0,
    .use_autosuspend=0, .timer_autosuspends=0, .$bit_field_pad1=0,
    .$pad2=0, .request=/*enum*/RPM_REQ_NONE, .runtime_status=/*enum*/RPM_ACTIVE,
    .runtime_error=0, .autosuspend_delay=0,
    .$pad3=0, .last_busy=0ul, .active_jiffies=0ul,
    .suspended_jiffies=0ul, .accounting_timestamp=0ul,
    .subsys_data=((struct pm_subsys_data *)NULL), .qos=((struct dev_pm_qos *)NULL) }, .pm_domain=((struct dev_pm_domain *)NULL),
    .numa_node=0,
    .$pad0=0, .dma_mask=((unsigned long long int *)NULL), .coherent_dma_mask=0ull,
    .dma_parms=((struct device_dma_parameters *)NULL), .dma_pools={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) },
    .dma_mem=((struct dma_coherent_mem *)NULL),
    .archdata={ .dma_ops=((struct dma_map_ops *)NULL), .iommu=NULL },
    .of_node=((struct device_node *)NULL),
    .acpi_node={ .handle=NULL },
    .devt=0u, .id=0u,
    .devres_lock={ .ldv_5961={ .rlock={ .raw_lock={ .ldv_2024={ .head_tail=0u } }, .magic=0u,
    .owner_cpu=0u, .$pad0=0, .owner=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } } } }, .devres_head={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) },
    .knode_class={ .n_klist=NULL, .n_node={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) }, .n_ref={ .refcount={ .counter=0 } },
    .$pad0=0 },
    .class=((struct class *)NULL),
    .groups=((struct attribute_group **)NULL), .release=((void (*)(struct device *))NULL),
    .iommu_group=((struct iommu_group *)NULL) }, .input_name=((signed char *)NULL),
    .input_phys=((signed char *)NULL), .input_id={ .bustype=0, .vendor=0, .product=0, .version=0 },
    .driver_name=((signed char *)NULL),
    .map_name=((signed char *)NULL), .rc_map={ .scan=((struct rc_map_table *)NULL), .size=0u, .len=0u,
    .alloc=0u, .rc_type=/*enum*/RC_TYPE_UNKNOWN, .name=((const char *)NULL),
    .lock={ .ldv_5961={ .rlock={ .raw_lock={ .ldv_2024={ .head_tail=0u } }, .magic=0u,
    .owner_cpu=0u, .$pad0=0, .owner=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } } } } },
    .lock={ .count={ .counter=0 }, .$pad0=0, .wait_lock={ .ldv_5961={ .rlock={ .raw_lock={ .ldv_2024={ .head_tail=0u } }, .magic=0u,
    .owner_cpu=0u, .$pad0=0, .owner=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } } } }, .wait_list={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) },
    .owner=((struct task_struct *)NULL),
    .name=((const char *)NULL),
    .magic=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } },
    .devno=0,
    .raw=((struct ir_raw_event_ctrl *)NULL), .input_dev=((struct input_dev *)NULL),
    .driver_type=/*enum*/RC_DRIVER_SCANCODE,
    .idle=0,
    .$pad0=0, .allowed_protos=0, .scanmask=0,
    .$pad1=0, .priv=NULL, .keylock={ .ldv_5961={ .rlock={ .raw_lock={ .ldv_2024={ .head_tail=0u } }, .magic=0u,
    .owner_cpu=0u, .$pad0=0, .owner=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } } } }, .keypressed=0,
    .$pad2=0, .keyup_jiffies=0, .timer_keyup={ .entry={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) }, .expires=0ul,
    .base=((struct tvec_base *)NULL), .function=((void (*)(unsigned long int))NULL),
    .data=0ul,
    .slack=0, .start_pid=0, .start_site=NULL, .start_comm={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    .lockdep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } },
    .last_keycode=0,
    .last_scancode=0, .last_toggle=0, .$pad3=0,
    .timeout=0, .min_timeout=0, .max_timeout=0,
    .rx_resolution=0, .tx_resolution=0, .change_protocol=((int (*)(struct rc_dev *, unsigned long int *))NULL),
    .open=((int (*)(struct rc_dev *))NULL),
    .close=((void (*)(struct rc_dev *))NULL),
    .s_tx_mask=((int (*)(struct rc_dev *, unsigned int))NULL),
    .s_tx_carrier=((int (*)(struct rc_dev *, unsigned int))NULL),
    .s_tx_duty_cycle=((int (*)(struct rc_dev *, unsigned int))NULL),
    .s_rx_carrier_range=((int (*)(struct rc_dev *, unsigned int, unsigned int))NULL),
    .tx_ir=((int (*)(struct rc_dev *, unsigned int *, unsigned int))NULL),
    .s_idle=((void (*)(struct rc_dev *, unsigned char))NULL),
    .s_learning_mode=((int (*)(struct rc_dev *, int))NULL),
    .s_carrier_report=((int (*)(struct rc_dev *, int))NULL) } ({ { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { { 00000000000000000000000000000000 } }, 0, 0, 0, 0, 0, 000, 000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, { { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } }, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { { 00000000000000000000000000000000 }, 0, 0, 000000, 00000000, 00000000, 00000000, 00000000, 00000000000000000000000000000000000000000000000000000000, { { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } }, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, { 00000000000000000000000000000000, 00000000000000000000000000000000, { { { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } }, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000, 00000000, 000000000000000000000000000000000000000000000000, { { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000 }, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } }, 0000000000000000000000000000000000000000000000000000000000000000, { { 0000000000000000000000000000000000000000000000000000000000000000 }, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } }, { { { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } }, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } }, { 00000000000000000000000000000000 }, { 00000000000000000000000000000000 }}, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000 }, 00000000000000000000000000000000, 00000000000000000000000000000000, { { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } }, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, { { 00000000000000000000000000000000 } }, 00000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000, 0000000000000000, 0000000000000000, 0000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } } }, { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, { { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } }, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000, 000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } }, 00000000, 00000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000 }, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } }})

State 33 file rc_core_bug.c line 5061 thread 0
----------------------------------------------------
  return_value_nondet_kobj_uevent_env$2=0 (00000000000000000000000000000000)

State 34 file rc_core_bug.c line 5061 thread 0
----------------------------------------------------
  return_value_nondet_kobj_uevent_env$2=0 (00000000000000000000000000000000)

State 35 file rc_core_bug.c line 5061 thread 0
----------------------------------------------------
  ldvarg0=((struct kobj_uevent_env *)NULL) (0000000000000000000000000000000000000000000000000000000000000000)

State 36 file rc_core_bug.c line 5062 thread 0
----------------------------------------------------
  return_value_nondet_charptr$3=0 (00000000000000000000000000000000)

State 37 file rc_core_bug.c line 5062 thread 0
----------------------------------------------------
  return_value_nondet_charptr$3=0 (00000000000000000000000000000000)

State 38 file rc_core_bug.c line 5062 thread 0
----------------------------------------------------
  ldvarg5=((signed char *)NULL) (0000000000000000000000000000000000000000000000000000000000000000)

State 39 file rc_core_bug.c line 5063 thread 0
----------------------------------------------------
  return_value_nondet_device$4=0 (00000000000000000000000000000000)

State 40 file rc_core_bug.c line 5063 thread 0
----------------------------------------------------
  return_value_nondet_device$4=28 (00000000000000000000000000011100)

State 41 file rc_core_bug.c line 5063 thread 0
----------------------------------------------------
  ldvarg1=28 + ((struct device *)NULL) (0000000000000000000000000000000000000000000000000000000000011100)

State 42 file rc_core_bug.c line 5064 thread 0
----------------------------------------------------
  ldv_retval_0=0 (00000000000000000000000000000000)

State 43 file rc_core_bug.c line 5065 thread 0
----------------------------------------------------
  return_value_nondet_sizet$5=0 (00000000000000000000000000000000)

State 44 file rc_core_bug.c line 5065 thread 0
----------------------------------------------------
  return_value_nondet_sizet$5=0 (00000000000000000000000000000000)

State 45 file rc_core_bug.c line 5065 thread 0
----------------------------------------------------
  ldvarg4=0 (0000000000000000000000000000000000000000000000000000000000000000)

State 46 file rc_core_bug.c line 5067 thread 0
----------------------------------------------------
  return_value_nondet_device_attribute$6=0 (00000000000000000000000000000000)

State 47 file rc_core_bug.c line 5067 thread 0
----------------------------------------------------
  return_value_nondet_device_attribute$6=0 (00000000000000000000000000000000)

State 48 file rc_core_bug.c line 5067 thread 0
----------------------------------------------------
  dev_attr_protocols_group1=((struct device_attribute *)NULL) (0000000000000000000000000000000000000000000000000000000000000000)

State 49 file rc_core_bug.c line 5069 thread 0
----------------------------------------------------
  return_value_nondet_device$7=0 (00000000000000000000000000000000)

State 50 file rc_core_bug.c line 5069 thread 0
----------------------------------------------------
  return_value_nondet_device$7=0 (00000000000000000000000000000000)

State 51 file rc_core_bug.c line 5069 thread 0
----------------------------------------------------
  rc_dev_type_group0=((struct device *)NULL) (0000000000000000000000000000000000000000000000000000000000000000)

State 52 file rc_core_bug.c line 5070 thread 0
----------------------------------------------------
  return_value_nondet_umode_t$8=0 (00000000000000000000000000000000)

State 53 file rc_core_bug.c line 5070 thread 0
----------------------------------------------------
  return_value_nondet_umode_t$8=0 (00000000000000000000000000000000)

State 54 file rc_core_bug.c line 5070 thread 0
----------------------------------------------------
  ldvarg2=((unsigned short int *)NULL) (0000000000000000000000000000000000000000000000000000000000000000)

State 55 file rc_core_bug.c line 6292 thread 0
----------------------------------------------------
  __CPROVER_thread_priorities={ 8, 22, 5 } ({ 00000000000000000000000000001000, 00000000000000000000000000010110, 00000000000000000000000000000101 })

State 56 file rc_core_bug.c line 6293 thread 0
----------------------------------------------------
  __CPROVER_threads={ "c::ir_devnode_ldvwrapper", "c::store_protocols_ldvwrapper", "c::show_protocols_ldvwrapper" } ({ 0001110100000000000000000000000000000000000000000000000000000000, 0001111000000000000000000000000000000000000000000000000000000000, 0001111100000000000000000000000000000000000000000000000000000000 })

State 57 file rc_core_bug.c line 6650 thread 0
----------------------------------------------------
  ir_raw_client_list={ .next=&ir_raw_client_list.next, .prev=&ir_raw_client_list.next } ({ 0010000000000000000000000000000000000000000000000000000000000000, 0010000000000000000000000000000000000000000000000000000000000000 })

State 58 file rc_core_bug.c line 6651 thread 0
----------------------------------------------------
  ir_raw_handler_lock={ .count={ .counter=1 }, .$pad0=0, .wait_lock={ .ldv_5961={ .rlock={ .raw_lock={ .ldv_2024={ .head_tail=0u } }, .magic=3735899821u,
    .owner_cpu=4294967295u, .$pad0=0,
    .owner=INVALID-255, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name="ir_raw_handler_lock.wait_lock",
    .cpu=0,
    .$pad0=0, .ip=0ul } } } }, .wait_list={ .next=&ir_raw_handler_lock.wait_list, .prev=&ir_raw_handler_lock.wait_list },
    .owner=((struct task_struct *)NULL),
    .name=((signed char *)NULL),
    .magic=&ir_raw_handler_lock.count, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name="ir_raw_handler_lock",
    .cpu=0, .$pad0=0,
    .ip=0ul } } ({ { 00000000000000000000000000000001 }, 00000000000000000000000000000000, { { { 00000000000000000000000000000000 }, 11011110101011010100111010101101, 11111111111111111111111111111111, 00000000000000000000000000000000, 1111111111111111111111111111111111111111111111111111111111111111, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0010000100000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } }, { 0010001000000000000000000000000000000000000000000000000001010000, 0010001000000000000000000000000000000000000000000000000001010000 }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0010001000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0010001100000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } })

State 59 file rc_core_bug.c line 6655 thread 0
----------------------------------------------------
  ir_raw_handler_list={ .next=&ir_raw_handler_list.next, .prev=&ir_raw_handler_list.next } ({ 0010010000000000000000000000000000000000000000000000000000000000, 0010010000000000000000000000000000000000000000000000000000000000 })

State 60 file rc_core_bug.c line 6656 thread 0
----------------------------------------------------
  available_protocols=0 (0000000000000000000000000000000000000000000000000000000000000000)

State 61 file rc_core_bug.c line 6657 thread 0
----------------------------------------------------
  wq_load={ .data={ .counter=0l }, .entry={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) }, .func=((void (*)(struct work_struct *))NULL),
    .lockdep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } } ({ { 0000000000000000000000000000000000000000000000000000000000000000 }, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } })

State 62 file rc_core_bug.c line 7474 thread 0
----------------------------------------------------
  ldv_mutex_cred_guard_mutex_of_signal_struct=0 (00000000000000000000000000000000)

State 63 file rc_core_bug.c line 7598 thread 0
----------------------------------------------------
  ldv_mutex_ir_raw_handler_lock=0 (00000000000000000000000000000000)

State 64 file rc_core_bug.c line 7721 thread 0
----------------------------------------------------
  ldv_mutex_lock=0 (00000000000000000000000000000000)

State 65 file rc_core_bug.c line 7844 thread 0
----------------------------------------------------
  ldv_mutex_lock_of_rc_dev=0 (00000000000000000000000000000000)

State 66 file rc_core_bug.c line 7967 thread 0
----------------------------------------------------
  ldv_mutex_mutex_of_device=0 (00000000000000000000000000000000)

State 70 file rc_core_bug.c line 6297 function main thread 0
----------------------------------------------------
  s={ .dev={ .parent=((struct device *)NULL), .p=((struct device_private *)NULL), .kobj={ .name=((const char *)NULL), .entry={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) }, .parent=((struct kobject *)NULL),
    .kset=((struct kset *)NULL), .ktype=((struct kobj_type *)NULL),
    .sd=((struct sysfs_dirent *)NULL), .kref={ .refcount={ .counter=0 } },
    .state_initialized=0, .state_in_sysfs=0,
    .state_add_uevent_sent=0, .state_remove_uevent_sent=0,
    .uevent_suppress=0, .$bit_field_pad0=0,
    .$pad0=0 },
    .init_name=((const char *)NULL),
    .type=((struct device_type *)NULL), .mutex={ .count={ .counter=0 }, .$pad0=0, .wait_lock={ .ldv_5961={ .rlock={ .raw_lock={ .ldv_2024={ .head_tail=0u } }, .magic=0u,
    .owner_cpu=0u, .$pad0=0, .owner=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } } } }, .wait_list={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) },
    .owner=((struct task_struct *)NULL),
    .name=((const char *)NULL),
    .magic=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } },
    .bus=((struct bus_type *)NULL),
    .driver=((struct device_driver *)NULL), .platform_data=NULL,
    .power={ .power_state={ .event=0 }, .can_wakeup=0, .async_suspend=0,
    .$bit_field_pad0=0, .is_prepared=FALSE,
    .is_suspended=FALSE, .ignore_children=FALSE,
    .early_init=FALSE, .$pad0=0,
    .lock={ .ldv_5961={ .rlock={ .raw_lock={ .ldv_2024={ .head_tail=0u } }, .magic=0u,
    .owner_cpu=0u, .$pad0=0, .owner=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } } } }, .entry={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) },
    .completion={ .done=0u, .$pad0=0, .wait={ .lock={ .ldv_5961={ .rlock={ .raw_lock={ .ldv_2024={ .head_tail=0u } }, .magic=0u,
    .owner_cpu=0u, .$pad0=0, .owner=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } } } }, .task_list={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) } } },
    .wakeup=((struct wakeup_source *)NULL),
    .wakeup_path=FALSE,
    .syscore=FALSE, .$pad1=0, .suspend_timer={ .entry={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) }, .expires=0ul,
    .base=((struct tvec_base *)NULL), .function=((void (*)(unsigned long int))NULL),
    .data=0ul,
    .slack=0, .start_pid=0, .start_site=NULL, .start_comm={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    .lockdep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } },
    .timer_expires=0ul,
    .work={ .data={ .counter=0l }, .entry={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) }, .func=((void (*)(struct work_struct *))NULL),
    .lockdep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } }, .wait_queue={ .lock={ .ldv_5961={ .rlock={ .raw_lock={ .ldv_2024={ .head_tail=0u } }, .magic=0u,
    .owner_cpu=0u, .$pad0=0, .owner=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } } } }, .task_list={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) } },
    .usage_count={ .counter=0 },
    .child_count={ .counter=0 }, .disable_depth=0,
    .idle_notification=0, .request_pending=0,
    .deferred_resume=0, .run_wake=0,
    .runtime_auto=0, .no_callbacks=0, .irq_safe=0,
    .use_autosuspend=0, .timer_autosuspends=0, .$bit_field_pad1=0,
    .$pad2=0, .request=/*enum*/RPM_REQ_NONE, .runtime_status=/*enum*/RPM_ACTIVE,
    .runtime_error=0, .autosuspend_delay=0,
    .$pad3=0, .last_busy=0ul, .active_jiffies=0ul,
    .suspended_jiffies=0ul, .accounting_timestamp=0ul,
    .subsys_data=((struct pm_subsys_data *)NULL), .qos=((struct dev_pm_qos *)NULL) }, .pm_domain=((struct dev_pm_domain *)NULL),
    .numa_node=0,
    .$pad0=0, .dma_mask=((unsigned long long int *)NULL), .coherent_dma_mask=0ull,
    .dma_parms=((struct device_dma_parameters *)NULL), .dma_pools={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) },
    .dma_mem=((struct dma_coherent_mem *)NULL),
    .archdata={ .dma_ops=((struct dma_map_ops *)NULL), .iommu=NULL },
    .of_node=((struct device_node *)NULL),
    .acpi_node={ .handle=NULL },
    .devt=0u, .id=0u,
    .devres_lock={ .ldv_5961={ .rlock={ .raw_lock={ .ldv_2024={ .head_tail=0u } }, .magic=0u,
    .owner_cpu=0u, .$pad0=0, .owner=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } } } }, .devres_head={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) },
    .knode_class={ .n_klist=NULL, .n_node={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) }, .n_ref={ .refcount={ .counter=0 } },
    .$pad0=0 },
    .class=((struct class *)NULL),
    .groups=((struct attribute_group **)NULL), .release=((void (*)(struct device *))NULL),
    .iommu_group=((struct iommu_group *)NULL) }, .input_name=((signed char *)NULL),
    .input_phys=((signed char *)NULL), .input_id={ .bustype=0, .vendor=0, .product=0, .version=0 },
    .driver_name=((signed char *)NULL),
    .map_name=((signed char *)NULL), .rc_map={ .scan=((struct rc_map_table *)NULL), .size=0u, .len=0u,
    .alloc=0u, .rc_type=/*enum*/RC_TYPE_UNKNOWN, .name=((const char *)NULL),
    .lock={ .ldv_5961={ .rlock={ .raw_lock={ .ldv_2024={ .head_tail=0u } }, .magic=0u,
    .owner_cpu=0u, .$pad0=0, .owner=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } } } } },
    .lock={ .count={ .counter=0 }, .$pad0=0, .wait_lock={ .ldv_5961={ .rlock={ .raw_lock={ .ldv_2024={ .head_tail=0u } }, .magic=0u,
    .owner_cpu=0u, .$pad0=0, .owner=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } } } }, .wait_list={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) },
    .owner=((struct task_struct *)NULL),
    .name=((const char *)NULL),
    .magic=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } },
    .devno=0,
    .raw=((struct ir_raw_event_ctrl *)NULL), .input_dev=((struct input_dev *)NULL),
    .driver_type=/*enum*/524288,
    .idle=0, .$pad0=0,
    .allowed_protos=0, .scanmask=0, .$pad1=0,
    .priv=NULL, .keylock={ .ldv_5961={ .rlock={ .raw_lock={ .ldv_2024={ .head_tail=0u } }, .magic=0u,
    .owner_cpu=0u, .$pad0=0, .owner=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } } } }, .keypressed=0,
    .$pad2=0, .keyup_jiffies=0, .timer_keyup={ .entry={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) }, .expires=0ul,
    .base=((struct tvec_base *)NULL), .function=((void (*)(unsigned long int))NULL),
    .data=0ul,
    .slack=0, .start_pid=0, .start_site=NULL, .start_comm={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    .lockdep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } },
    .last_keycode=0,
    .last_scancode=0, .last_toggle=0, .$pad3=0,
    .timeout=0, .min_timeout=0, .max_timeout=0,
    .rx_resolution=0, .tx_resolution=0, .change_protocol=((int (*)(struct rc_dev *, unsigned long int *))NULL),
    .open=((int (*)(struct rc_dev *))NULL),
    .close=((void (*)(struct rc_dev *))NULL),
    .s_tx_mask=((int (*)(struct rc_dev *, unsigned int))NULL),
    .s_tx_carrier=((int (*)(struct rc_dev *, unsigned int))NULL),
    .s_tx_duty_cycle=((int (*)(struct rc_dev *, unsigned int))NULL),
    .s_rx_carrier_range=((int (*)(struct rc_dev *, unsigned int, unsigned int))NULL),
    .tx_ir=((int (*)(struct rc_dev *, unsigned int *, unsigned int))NULL),
    .s_idle=((void (*)(struct rc_dev *, unsigned char))NULL),
    .s_learning_mode=((int (*)(struct rc_dev *, int))NULL),
    .s_carrier_report=((int (*)(struct rc_dev *, int))NULL) } ({ { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { { 00000000000000000000000000000000 } }, 0, 0, 0, 0, 0, 000, 000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, { { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } }, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { { 00000000000000000000000000000000 }, 0, 0, 000000, 00000000, 00000000, 00000000, 00000000, 00000000000000000000000000000000000000000000000000000000, { { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } }, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, { 00000000000000000000000000000000, 00000000000000000000000000000000, { { { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } }, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000, 00000000, 000000000000000000000000000000000000000000000000, { { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000 }, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } }, 0000000000000000000000000000000000000000000000000000000000000000, { { 0000000000000000000000000000000000000000000000000000000000000000 }, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } }, { { { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } }, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } }, { 00000000000000000000000000000000 }, { 00000000000000000000000000000000 }}, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000 }, 00000000000000000000000000000000, 00000000000000000000000000000000, { { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } }, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, { { 00000000000000000000000000000000 } }, 00000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000, 0000000000000000, 0000000000000000, 0000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } } }, { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, { { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } }, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000010000000000000000000, 00000000, 000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } }, 00000000, 00000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000 }, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } }})

State 71 file rc_core_bug.c line 6298 function main thread 0
----------------------------------------------------
  dev_attr_protocols_group0={ .dev={ .parent=((struct device *)NULL), .p=((struct device_private *)NULL), .kobj={ .name=((const char *)NULL), .entry={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) }, .parent=((struct kobject *)NULL),
    .kset=((struct kset *)NULL), .ktype=((struct kobj_type *)NULL),
    .sd=((struct sysfs_dirent *)NULL), .kref={ .refcount={ .counter=0 } },
    .state_initialized=0, .state_in_sysfs=0,
    .state_add_uevent_sent=0, .state_remove_uevent_sent=0,
    .uevent_suppress=0, .$bit_field_pad0=0,
    .$pad0=0 },
    .init_name=((const char *)NULL),
    .type=((struct device_type *)NULL), .mutex={ .count={ .counter=0 }, .$pad0=0, .wait_lock={ .ldv_5961={ .rlock={ .raw_lock={ .ldv_2024={ .head_tail=0u } }, .magic=0u,
    .owner_cpu=0u, .$pad0=0, .owner=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } } } }, .wait_list={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) },
    .owner=((struct task_struct *)NULL),
    .name=((const char *)NULL),
    .magic=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } },
    .bus=((struct bus_type *)NULL),
    .driver=((struct device_driver *)NULL), .platform_data=NULL,
    .power={ .power_state={ .event=0 }, .can_wakeup=0, .async_suspend=0,
    .$bit_field_pad0=0, .is_prepared=FALSE,
    .is_suspended=FALSE, .ignore_children=FALSE,
    .early_init=FALSE, .$pad0=0,
    .lock={ .ldv_5961={ .rlock={ .raw_lock={ .ldv_2024={ .head_tail=0u } }, .magic=0u,
    .owner_cpu=0u, .$pad0=0, .owner=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } } } }, .entry={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) },
    .completion={ .done=0u, .$pad0=0, .wait={ .lock={ .ldv_5961={ .rlock={ .raw_lock={ .ldv_2024={ .head_tail=0u } }, .magic=0u,
    .owner_cpu=0u, .$pad0=0, .owner=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } } } }, .task_list={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) } } },
    .wakeup=((struct wakeup_source *)NULL),
    .wakeup_path=FALSE,
    .syscore=FALSE, .$pad1=0, .suspend_timer={ .entry={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) }, .expires=0ul,
    .base=((struct tvec_base *)NULL), .function=((void (*)(unsigned long int))NULL),
    .data=0ul,
    .slack=0, .start_pid=0, .start_site=NULL, .start_comm={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    .lockdep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } },
    .timer_expires=0ul,
    .work={ .data={ .counter=0l }, .entry={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) }, .func=((void (*)(struct work_struct *))NULL),
    .lockdep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } }, .wait_queue={ .lock={ .ldv_5961={ .rlock={ .raw_lock={ .ldv_2024={ .head_tail=0u } }, .magic=0u,
    .owner_cpu=0u, .$pad0=0, .owner=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } } } }, .task_list={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) } },
    .usage_count={ .counter=0 },
    .child_count={ .counter=0 }, .disable_depth=0,
    .idle_notification=0, .request_pending=0,
    .deferred_resume=0, .run_wake=0,
    .runtime_auto=0, .no_callbacks=0, .irq_safe=0,
    .use_autosuspend=0, .timer_autosuspends=0, .$bit_field_pad1=0,
    .$pad2=0, .request=/*enum*/RPM_REQ_NONE, .runtime_status=/*enum*/RPM_ACTIVE,
    .runtime_error=0, .autosuspend_delay=0,
    .$pad3=0, .last_busy=0ul, .active_jiffies=0ul,
    .suspended_jiffies=0ul, .accounting_timestamp=0ul,
    .subsys_data=((struct pm_subsys_data *)NULL), .qos=((struct dev_pm_qos *)NULL) }, .pm_domain=((struct dev_pm_domain *)NULL),
    .numa_node=0,
    .$pad0=0, .dma_mask=((unsigned long long int *)NULL), .coherent_dma_mask=0ull,
    .dma_parms=((struct device_dma_parameters *)NULL), .dma_pools={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) },
    .dma_mem=((struct dma_coherent_mem *)NULL),
    .archdata={ .dma_ops=((struct dma_map_ops *)NULL), .iommu=NULL },
    .of_node=((struct device_node *)NULL),
    .acpi_node={ .handle=NULL },
    .devt=0u, .id=0u,
    .devres_lock={ .ldv_5961={ .rlock={ .raw_lock={ .ldv_2024={ .head_tail=0u } }, .magic=0u,
    .owner_cpu=0u, .$pad0=0, .owner=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } } } }, .devres_head={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) },
    .knode_class={ .n_klist=NULL, .n_node={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) }, .n_ref={ .refcount={ .counter=0 } },
    .$pad0=0 },
    .class=((struct class *)NULL),
    .groups=((struct attribute_group **)NULL), .release=((void (*)(struct device *))NULL),
    .iommu_group=((struct iommu_group *)NULL) }, .input_name=((signed char *)NULL),
    .input_phys=((signed char *)NULL), .input_id={ .bustype=0, .vendor=0, .product=0, .version=0 },
    .driver_name=((signed char *)NULL),
    .map_name=((signed char *)NULL), .rc_map={ .scan=((struct rc_map_table *)NULL), .size=0u, .len=0u,
    .alloc=0u, .rc_type=/*enum*/RC_TYPE_UNKNOWN, .name=((const char *)NULL),
    .lock={ .ldv_5961={ .rlock={ .raw_lock={ .ldv_2024={ .head_tail=0u } }, .magic=0u,
    .owner_cpu=0u, .$pad0=0, .owner=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } } } } },
    .lock={ .count={ .counter=0 }, .$pad0=0, .wait_lock={ .ldv_5961={ .rlock={ .raw_lock={ .ldv_2024={ .head_tail=0u } }, .magic=0u,
    .owner_cpu=0u, .$pad0=0, .owner=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } } } }, .wait_list={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) },
    .owner=((struct task_struct *)NULL),
    .name=((const char *)NULL),
    .magic=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } },
    .devno=0,
    .raw=((struct ir_raw_event_ctrl *)NULL), .input_dev=((struct input_dev *)NULL),
    .driver_type=/*enum*/524288,
    .idle=0, .$pad0=0,
    .allowed_protos=0, .scanmask=0, .$pad1=0,
    .priv=NULL, .keylock={ .ldv_5961={ .rlock={ .raw_lock={ .ldv_2024={ .head_tail=0u } }, .magic=0u,
    .owner_cpu=0u, .$pad0=0, .owner=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } } } }, .keypressed=0,
    .$pad2=0, .keyup_jiffies=0, .timer_keyup={ .entry={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) }, .expires=0ul,
    .base=((struct tvec_base *)NULL), .function=((void (*)(unsigned long int))NULL),
    .data=0ul,
    .slack=0, .start_pid=0, .start_site=NULL, .start_comm={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    .lockdep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } },
    .last_keycode=0,
    .last_scancode=0, .last_toggle=0, .$pad3=0,
    .timeout=0, .min_timeout=0, .max_timeout=0,
    .rx_resolution=0, .tx_resolution=0, .change_protocol=((int (*)(struct rc_dev *, unsigned long int *))NULL),
    .open=((int (*)(struct rc_dev *))NULL),
    .close=((void (*)(struct rc_dev *))NULL),
    .s_tx_mask=((int (*)(struct rc_dev *, unsigned int))NULL),
    .s_tx_carrier=((int (*)(struct rc_dev *, unsigned int))NULL),
    .s_tx_duty_cycle=((int (*)(struct rc_dev *, unsigned int))NULL),
    .s_rx_carrier_range=((int (*)(struct rc_dev *, unsigned int, unsigned int))NULL),
    .tx_ir=((int (*)(struct rc_dev *, unsigned int *, unsigned int))NULL),
    .s_idle=((void (*)(struct rc_dev *, unsigned char))NULL),
    .s_learning_mode=((int (*)(struct rc_dev *, int))NULL),
    .s_carrier_report=((int (*)(struct rc_dev *, int))NULL) } ({ { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { { 00000000000000000000000000000000 } }, 0, 0, 0, 0, 0, 000, 000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, { { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } }, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { { 00000000000000000000000000000000 }, 0, 0, 000000, 00000000, 00000000, 00000000, 00000000, 00000000000000000000000000000000000000000000000000000000, { { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } }, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, { 00000000000000000000000000000000, 00000000000000000000000000000000, { { { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } }, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000, 00000000, 000000000000000000000000000000000000000000000000, { { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000 }, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } }, 0000000000000000000000000000000000000000000000000000000000000000, { { 0000000000000000000000000000000000000000000000000000000000000000 }, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } }, { { { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } }, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } }, { 00000000000000000000000000000000 }, { 00000000000000000000000000000000 }}, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000 }, 00000000000000000000000000000000, 00000000000000000000000000000000, { { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } }, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, { { 00000000000000000000000000000000 } }, 00000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000, 0000000000000000, 0000000000000000, 0000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } } }, { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, { { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } }, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000010000000000000000000, 00000000, 000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } }, 00000000, 00000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000 }, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } }})

State 74 file rc_core_bug.c line 8095 function ldv_initialize thread 0
----------------------------------------------------
  ldv_mutex_cred_guard_mutex_of_signal_struct=1 (00000000000000000000000000000001)

State 75 file rc_core_bug.c line 8096 function ldv_initialize thread 0
----------------------------------------------------
  ldv_mutex_ir_raw_handler_lock=1 (00000000000000000000000000000001)

State 76 file rc_core_bug.c line 8097 function ldv_initialize thread 0
----------------------------------------------------
  ldv_mutex_lock=1 (00000000000000000000000000000001)

State 77 file rc_core_bug.c line 8098 function ldv_initialize thread 0
----------------------------------------------------
  ldv_mutex_lock_of_rc_dev=1 (00000000000000000000000000000001)

State 78 file rc_core_bug.c line 8099 function ldv_initialize thread 0
----------------------------------------------------
  ldv_mutex_mutex_of_device=1 (00000000000000000000000000000001)

State 83 file rc_core_bug.c line 5031 function rc_core_init thread 0
----------------------------------------------------
  rc=0 (00000000000000000000000000000000)

State 84 file rc_core_bug.c line 5032 function rc_core_init thread 0
----------------------------------------------------
  __key={ .subkeys={ { .__one_byte=0 }, { .__one_byte=0 }, { .__one_byte=0 }, { .__one_byte=0 }, { .__one_byte=0 }, { .__one_byte=0 }, { .__one_byte=0 }, { .__one_byte=0 } } } ({ { { 00000000 }, { 00000000 }, { 00000000 }, { 00000000 }, { 00000000 }, { 00000000 }, { 00000000 }, { 00000000 } } })

State 85 file rc_core_bug.c line 5033 function rc_core_init thread 0
----------------------------------------------------
  tmp=0 (00000000000000000000000000000000)

State 87 file rc_core_bug.c line 5036 function rc_core_init thread 0
----------------------------------------------------
  tmp=0 (00000000000000000000000000000000)

State 88 file rc_core_bug.c line 5037 function rc_core_init thread 0
----------------------------------------------------
  rc=0 (00000000000000000000000000000000)

State 92 file rc_core_bug.c line 5044 function rc_core_init thread 0
----------------------------------------------------
  map=&empty_map.list (0010010100000000000000000000000000000000000000000000000000000000)

State 94 file rc_core_bug.c line 3551 function rc_map_register thread 0
----------------------------------------------------
  lock=((struct spinlock *)NULL) (0000000000000000000000000000000000000000000000000000000000000000)

State 95 file rc_core_bug.c line 3551 function rc_map_register thread 0
----------------------------------------------------
  lock=&rc_map_lock.ldv_5961 (0010011000000000000000000000000000000000000000000000000000000000)

State 99 file rc_core_bug.c line 3552 function rc_map_register thread 0
----------------------------------------------------
  new=((struct list_head *)NULL) (0000000000000000000000000000000000000000000000000000000000000000)

State 100 file rc_core_bug.c line 3552 function rc_map_register thread 0
----------------------------------------------------
  new=&empty_map.list (0010010100000000000000000000000000000000000000000000000000000000)

State 101 file rc_core_bug.c line 3552 function rc_map_register thread 0
----------------------------------------------------
  head=((struct list_head *)NULL) (0000000000000000000000000000000000000000000000000000000000000000)

State 102 file rc_core_bug.c line 3552 function rc_map_register thread 0
----------------------------------------------------
  head=&rc_map_list.next (0000001000000000000000000000000000000000000000000000000000000000)

State 106 file rc_core_bug.c line 3553 function rc_map_register thread 0
----------------------------------------------------
  lock=((struct spinlock *)NULL) (0000000000000000000000000000000000000000000000000000000000000000)

State 107 file rc_core_bug.c line 3553 function rc_map_register thread 0
----------------------------------------------------
  lock=&rc_map_lock.ldv_5961 (0010011000000000000000000000000000000000000000000000000000000000)

State 114 file rc_core_bug.c line 6302 function main thread 0
----------------------------------------------------
  ldv_retval_0=0 (00000000000000000000000000000000)

State 122 file rc_core_bug.c line 5054 function rc_core_exit thread 0
----------------------------------------------------
  map=&empty_map.list (0010010100000000000000000000000000000000000000000000000000000000)

State 124 file rc_core_bug.c line 3562 function rc_map_unregister thread 0
----------------------------------------------------
  lock=((struct spinlock *)NULL) (0000000000000000000000000000000000000000000000000000000000000000)

State 125 file rc_core_bug.c line 3562 function rc_map_unregister thread 0
----------------------------------------------------
  lock=&rc_map_lock.ldv_5961 (0010011000000000000000000000000000000000000000000000000000000000)

State 130 file rc_core_bug.c line 3564 function rc_map_unregister thread 0
----------------------------------------------------
  lock=((struct spinlock *)NULL) (0000000000000000000000000000000000000000000000000000000000000000)

State 131 file rc_core_bug.c line 3564 function rc_map_unregister thread 0
----------------------------------------------------
  lock=&rc_map_lock.ldv_5961 (0010011000000000000000000000000000000000000000000000000000000000)

State 147 file rc_core_bug.c line 6279 function show_protocols_ldvwrapper thread 1
----------------------------------------------------
  device=&dev_attr_protocols_group0.dev (0010011100000000000000000000000000000000000000000000000000000000)

State 150 file rc_core_bug.c line 6279 function show_protocols_ldvwrapper thread 1
----------------------------------------------------
  mattr=((struct device_attribute *)NULL) (0000000000000000000000000000000000000000000000000000000000000000)

State 151 file rc_core_bug.c line 6279 function show_protocols_ldvwrapper thread 1
----------------------------------------------------
  buf=((signed char *)NULL) (0000000000000000000000000000000000000000000000000000000000000000)

State 152 file rc_core_bug.c line 4352 function show_protocols thread 1
----------------------------------------------------
  dev=((struct rc_dev *)NULL) (0000000000000000000000000000000000000000000000000000000000000000)

State 153 file rc_core_bug.c line 4353 function show_protocols thread 1
----------------------------------------------------
  __mptr=((struct device *)NULL) (0000000000000000000000000000000000000000000000000000000000000000)

State 154 file rc_core_bug.c line 4354 function show_protocols thread 1
----------------------------------------------------
  allowed=0 (0000000000000000000000000000000000000000000000000000000000000000)

State 155 file rc_core_bug.c line 4355 function show_protocols thread 1
----------------------------------------------------
  enabled=0 (0000000000000000000000000000000000000000000000000000000000000000)

State 156 file rc_core_bug.c line 4356 function show_protocols thread 1
----------------------------------------------------
  tmp=((signed char *)NULL) (0000000000000000000000000000000000000000000000000000000000000000)

State 157 file rc_core_bug.c line 4357 function show_protocols thread 1
----------------------------------------------------
  i=0 (00000000000000000000000000000000)

State 158 file rc_core_bug.c line 4358 function show_protocols thread 1
----------------------------------------------------
  descriptor={ .modname="rc_core", .function="show_protocols", .filename="/work/zakharov/bench-tests/cpa-1/work/current--X--drivers/media/rc/rc-core.ko--X--deg2_cpalinux-3.8-rc1--X--32_7a--X--cpachecker/linux-3.8-rc1/csd_deg_dscv/13/dscv_tempdir/dscv/ri/32_7a/drivers/media/rc/rc-main.c.prepared",
    .format="%s: allowed - 0x%llx, enabled - 0x%llx\n",
    .lineno=851,
    .$bit_field_pad0=0, .flags=0, .$pad0=0 } ({ 0010100000000000000000000000000000000000000000000000000000000000, 0010100100000000000000000000000000000000000000000000000000000000, 0010101000000000000000000000000000000000000000000000000000000000, 0010101100000000000000000000000000000000000000000000000000000000, 000000001101010011, 000000, 00000000, 00000000000000000000000000000000 })

State 159 file rc_core_bug.c line 4359 function show_protocols thread 1
----------------------------------------------------
  tmp___0=0 (0000000000000000000000000000000000000000000000000000000000000000)

State 160 file rc_core_bug.c line 4360 function show_protocols thread 1
----------------------------------------------------
  tmp___1=0 (00000000000000000000000000000000)

State 161 file rc_core_bug.c line 4361 function show_protocols thread 1
----------------------------------------------------
  tmp___2=0 (00000000000000000000000000000000)

State 162 file rc_core_bug.c line 4365 function show_protocols thread 1
----------------------------------------------------
  __mptr=&dev_attr_protocols_group0.dev (0010011100000000000000000000000000000000000000000000000000000000)

State 163 file rc_core_bug.c line 4366 function show_protocols thread 1
----------------------------------------------------
  dev=&dev_attr_protocols_group0.dev (0010011100000000000000000000000000000000000000000000000000000000)

State 164 file rc_core_bug.c line 4367 function show_protocols thread 1
----------------------------------------------------
  tmp=((signed char *)NULL) (0000000000000000000000000000000000000000000000000000000000000000)

State 167 file rc_core_bug.c line 6271 function store_protocols_ldvwrapper thread 3
----------------------------------------------------
  device=&dev_attr_protocols_group0.dev (0010011100000000000000000000000000000000000000000000000000000000)

State 168 file rc_core_bug.c line 6271 function store_protocols_ldvwrapper thread 3
----------------------------------------------------
  mattr=((struct device_attribute *)NULL) (0000000000000000000000000000000000000000000000000000000000000000)

State 169 file rc_core_bug.c line 6271 function store_protocols_ldvwrapper thread 3
----------------------------------------------------
  data=((signed char *)NULL) (0000000000000000000000000000000000000000000000000000000000000000)

State 170 file rc_core_bug.c line 6271 function store_protocols_ldvwrapper thread 3
----------------------------------------------------
  len=0 (0000000000000000000000000000000000000000000000000000000000000000)

State 171 file rc_core_bug.c line 4456 function store_protocols thread 3
----------------------------------------------------
  dev=((struct rc_dev *)NULL) (0000000000000000000000000000000000000000000000000000000000000000)

State 172 file rc_core_bug.c line 4457 function store_protocols thread 3
----------------------------------------------------
  __mptr=((struct device *)NULL) (0000000000000000000000000000000000000000000000000000000000000000)

State 173 file rc_core_bug.c line 4458 function store_protocols thread 3
----------------------------------------------------
  enable=0 (00000000)

State 174 file rc_core_bug.c line 4459 function store_protocols thread 3
----------------------------------------------------
  disable=0 (00000000)

State 175 file rc_core_bug.c line 4460 function store_protocols thread 3
----------------------------------------------------
  tmp=((signed char *)NULL) (0000000000000000000000000000000000000000000000000000000000000000)

State 176 file rc_core_bug.c line 4461 function store_protocols thread 3
----------------------------------------------------
  type=0 (0000000000000000000000000000000000000000000000000000000000000000)

State 177 file rc_core_bug.c line 4462 function store_protocols thread 3
----------------------------------------------------
  mask=0 (0000000000000000000000000000000000000000000000000000000000000000)

State 178 file rc_core_bug.c line 4463 function store_protocols thread 3
----------------------------------------------------
  rc=0 (00000000000000000000000000000000)

State 179 file rc_core_bug.c line 4464 function store_protocols thread 3
----------------------------------------------------
  i=0 (00000000000000000000000000000000)

State 180 file rc_core_bug.c line 4465 function store_protocols thread 3
----------------------------------------------------
  count=0 (00000000000000000000000000000000)

State 181 file rc_core_bug.c line 4466 function store_protocols thread 3
----------------------------------------------------
  flags=0 (0000000000000000000000000000000000000000000000000000000000000000)

State 182 file rc_core_bug.c line 4467 function store_protocols thread 3
----------------------------------------------------
  ret=0 (0000000000000000000000000000000000000000000000000000000000000000)

State 183 file rc_core_bug.c line 4468 function store_protocols thread 3
----------------------------------------------------
  descriptor={ .modname="rc_core", .function="store_protocols", .filename="/work/zakharov/bench-tests/cpa-1/work/current--X--drivers/media/rc/rc-core.ko--X--deg2_cpalinux-3.8-rc1--X--32_7a--X--cpachecker/linux-3.8-rc1/csd_deg_dscv/13/dscv_tempdir/dscv/ri/32_7a/drivers/media/rc/rc-main.c.prepared",
    .format="%s: Protocol switching not supported\n",
    .lineno=916,
    .$bit_field_pad0=0, .flags=0, .$pad0=0 } ({ 0010100000000000000000000000000000000000000000000000000000000000, 0010110100000000000000000000000000000000000000000000000000000000, 0010101000000000000000000000000000000000000000000000000000000000, 0010111000000000000000000000000000000000000000000000000000000000, 000000001110010100, 000000, 00000000, 00000000000000000000000000000000 })

State 184 file rc_core_bug.c line 4469 function store_protocols thread 3
----------------------------------------------------
  tmp___0=0 (0000000000000000000000000000000000000000000000000000000000000000)

State 185 file rc_core_bug.c line 4470 function store_protocols thread 3
----------------------------------------------------
  tmp___1=0 (00000000000000000000000000000000)

State 186 file rc_core_bug.c line 4471 function store_protocols thread 3
----------------------------------------------------
  descriptor___0={ .modname=((signed char *)NULL), .function=((signed char *)NULL), .filename=((signed char *)NULL),
    .format=((signed char *)NULL), .lineno=0,
    .$bit_field_pad0=0, .flags=0, .$pad0=0 } ({ 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 000000000000000000, 000000, 00000000, 00000000000000000000000000000000 })

State 187 file rc_core_bug.c line 4472 function store_protocols thread 3
----------------------------------------------------
  tmp___2=0 (0000000000000000000000000000000000000000000000000000000000000000)

State 188 file rc_core_bug.c line 4473 function store_protocols thread 3
----------------------------------------------------
  tmp___3=((signed char *)NULL) (0000000000000000000000000000000000000000000000000000000000000000)

State 189 file rc_core_bug.c line 4474 function store_protocols thread 3
----------------------------------------------------
  descriptor___1={ .modname="rc_core", .function="rc_core", .filename="rc_core",
    .format="ir_raw_handler_lock.wait_lock", .lineno=129,
    .$bit_field_pad0=0, .flags=0, .$pad0=0 } ({ 0010100000000000000000000000000000000000000000000000000000000000, 0010100000000000000000000000000000000000000000000000000000000000, 0010100000000000000000000000000000000000000000000000000000000000, 0010000100000000000000000000000000000000000000000000000000000000, 000000000010000001, 000000, 00000000, 00000000000000000000000000000000 })

State 190 file rc_core_bug.c line 4475 function store_protocols thread 3
----------------------------------------------------
  tmp___4=0 (0000000000000000000000000000000000000000000000000000000000000000)

State 191 file rc_core_bug.c line 4476 function store_protocols thread 3
----------------------------------------------------
  descriptor___2={ .modname=((signed char *)NULL), .function=((signed char *)NULL), .filename=((signed char *)NULL),
    .format=((signed char *)NULL), .lineno=0,
    .$bit_field_pad0=0, .flags=0, .$pad0=0 } ({ 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 000000000000000000, 000000, 00000000, 00000000000000000000000000000000 })

State 192 file rc_core_bug.c line 4477 function store_protocols thread 3
----------------------------------------------------
  tmp___5=0 (0000000000000000000000000000000000000000000000000000000000000000)

State 193 file rc_core_bug.c line 4478 function store_protocols thread 3
----------------------------------------------------
  tmp___6=((struct raw_spinlock *)NULL) (0000000000000000000000000000000000000000000000000000000000000000)

State 194 file rc_core_bug.c line 4479 function store_protocols thread 3
----------------------------------------------------
  descriptor___3={ .modname=((signed char *)NULL), .function=((signed char *)NULL), .filename=((signed char *)NULL),
    .format=((signed char *)NULL), .lineno=0,
    .$bit_field_pad0=0, .flags=0, .$pad0=0 } ({ 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 000000000000000000, 000000, 00000000, 00000000000000000000000000000000 })

State 195 file rc_core_bug.c line 4480 function store_protocols thread 3
----------------------------------------------------
  tmp___7=0 (0000000000000000000000000000000000000000000000000000000000000000)

State 196 file rc_core_bug.c line 4483 function store_protocols thread 3
----------------------------------------------------
  __mptr=&dev_attr_protocols_group0.dev (0010011100000000000000000000000000000000000000000000000000000000)

State 197 file rc_core_bug.c line 4484 function store_protocols thread 3
----------------------------------------------------
  dev=&dev_attr_protocols_group0.dev (0010011100000000000000000000000000000000000000000000000000000000)

State 198 file rc_core_bug.c line 4485 function store_protocols thread 3
----------------------------------------------------
  count=0 (00000000000000000000000000000000)

State 202 file rc_core_bug.c line 4505 function store_protocols thread 3
----------------------------------------------------
  r={ .list={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) }, .thread=((struct task_struct *)NULL),
    .lock={ .ldv_5961={ .rlock={ .raw_lock={ .ldv_2024={ .head_tail=0u } }, .magic=0u,
    .owner_cpu=0u, .$pad0=0, .owner=NULL, .dep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } } } },
    .kfifo={ .ldv_15194={ .kfifo={ .in=0u, .out=0u, .mask=0u, .esize=0u, .data=NULL } }, .buf=irep("(\"nil\")") },
    .last_event={ .tv64=0ll },
    .last_type=/*enum*/0, .$pad0=0,
    .dev=((struct rc_dev *)NULL), .enabled_protocols=0,
    .prev_ev={ .ldv_21014={ .duration=0u }, .pulse=0, .reset=0,
    .timeout=0, .carrier_report=0, .$bit_field_pad0=0,
    .$pad0=0 }, .this_ev={ .ldv_21014={ .duration=0u }, .pulse=0, .reset=0,
    .timeout=0, .carrier_report=0, .$bit_field_pad0=0,
    .$pad0=0 },
    .nec={ .state=0, .count=0u, .bits=0u, .is_nec_x=FALSE, .necx_repeat=FALSE,
    .$pad0=0 },
    .rc5={ .state=0, .bits=0u, .count=0u, .wanted_bits=0u },
    .rc6={ .state=0, .header=0, .$pad0=0, .body=0u, .toggle=FALSE,
    .$pad1=0, .count=0u, .wanted_bits=0u },
    .sony={ .state=0, .bits=0u, .count=0u },
    .jvc={ .state=0, .bits=0, .old_bits=0, .count=0u, .first=FALSE,
    .toggle=FALSE, .$pad0=0 },
    .rc5_sz={ .state=0, .bits=0u, .count=0u, .wanted_bits=0u },
    .$pad1=0,
    .sanyo={ .state=0, .count=0u, .bits=0ull }, .mce_kbd={ .idev=((struct input_dev *)NULL), .rx_timeout={ .entry={ .next=((struct list_head *)NULL), .prev=((struct list_head *)NULL) }, .expires=0ul,
    .base=((struct tvec_base *)NULL), .function=((void (*)(unsigned long int))NULL),
    .data=0ul,
    .slack=0, .start_pid=0, .start_site=NULL, .start_comm={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    .lockdep_map={ .key=((struct lock_class_key *)NULL), .class_cache={ ((struct lock_class *)NULL), ((struct lock_class *)NULL) }, .name=((const char *)NULL),
    .cpu=0, .$pad0=0, .ip=0ul } }, .name={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    .phys={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    .state=0,
    .header=0, .$pad0=0, .body=0u, .count=0u,
    .wanted_bits=0u, .$pad1=0 },
    .lirc={ .dev=((struct rc_dev *)NULL), .drv=((struct lirc_driver *)NULL), .carrier_low=0,
    .$pad0=0, .gap_start={ .tv64=0ll }, .gap_duration=0ull,
    .gap=FALSE, .send_timeout_reports=FALSE, .$pad1=0 } } ({ { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, { { { 00000000000000000000000000000000 }, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } } }, { { 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, ? }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 00000000000000000000000000000000, 0, 0, 0, 0, 0000, 000000000000000000000000 }, { 00000000000000000000000000000000, 0, 0, 0, 0, 0000, 000000000000000000000000 }, { 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000, 00000000, 0000000000000000 }, { 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000 }, { 00000000000000000000000000000000, 00000000, 000000000000000000000000, 00000000000000000000000000000000, 00000000, 000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000 }, { 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000 }, { 00000000000000000000000000000000, 0000000000000000, 0000000000000000, 00000000000000000000000000000000, 00000000, 00000000, 0000000000000000 }, { 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000 }, 00000000000000000000000000000000, { 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, { 0000000000000000000000000000000000000000000000000000000000000000, { { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, { 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000 }, { 0000000000000000000000000000000000000000000000000000000000000000, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 }, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000 } }, {}, { 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000, 00000000 }, 00000000000000000000000000000000, 00000000, 000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000 }, { 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 00000000000000000000000000000000, 00000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 0000000000000000000000000000000000000000000000000000000000000000, 00000000, 00000000, 000000000000000000000000000000000000000000000000 } })

State 204 file rc_core_bug.c line 4395 function show_protocols thread 1
----------------------------------------------------
  tmp_if_expr$1=FALSE (0)

State 205 file rc_core_bug.c line 4506 function store_protocols thread 3
----------------------------------------------------
  dev_attr_protocols_group0.raw=&r!3@1.list (0010110000000000000000000000000000000000000000000000000000000000)

State 207 file rc_core_bug.c line 4525 function store_protocols thread 3
----------------------------------------------------
  ret=-22 (1111111111111111111111111111111111111111111111111111111111101010)

State 214 file rc_core_bug.c line 4395 function show_protocols thread 1
----------------------------------------------------
  tmp_if_expr$1=FALSE (0)

Violated property:
  file rc_core_bug.c line 4395 function show_protocols
  assertion tmp_if_expr$1
  tmp_if_expr$1

VERIFICATION FAILED
